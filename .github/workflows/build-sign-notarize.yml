name: build-sign-notarize

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      s3-prefix:
        required: true
        type: string
      debug:
        required: true
        type: string
      sync-translation:
        required: false
        type: string
    outputs:
      s3-electron-dist-key:
        description: 'The S3 build key includes the installer files: [zip, dmg, etc, yml] from electron'
        value: ${{ jobs.build.outputs.s3-artifacts-key }}
      s3-custom-notarized-installers-key:
        description: 'The S3 build key includes the installer files: [zip, dmg, etc, yml] from notarization strategy done outside of electron'
        value: ${{ jobs.notarize-mac-installers.outputs.s3-installers-key }}
jobs:
  build:
    runs-on: [self-hosted, macOS, ARM64]
    outputs:
      s3-artifacts-key: ${{ steps.s3-artifact-uploader.outputs.key }}
    steps:
      - uses: teaxyz/setup@v0
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: copy cli bins
        run: |
          external_folder=modules/desktop/external
          mkdir $external_folder
          aws s3 cp $x64_key $external_folder/tea-x86-64
          aws s3 cp $arm64_key $external_folder/tea-arm64
        env:
          x64_key: s3://www.tea.xyz/tea-darwin+x86-64
          arm64_key: s3://www.tea.xyz/tea-darwin+aarch64
  
      - name: get gui version
        id: gui-version
        run: |
          tea +stedolan.github.io/jq
          export version=$(echo $(cat modules/desktop/package.json) | jq --raw-output .version)
          export postfix=
          release="release"
          if [ $prefix == $release ];
          then
              echo "no postfix"
          else
              echo "dev"
              export postfix=-dev
          fi
          echo "version=$version$postfix" >> $GITHUB_OUTPUT
        env:
          prefix: ${{ inputs.s3-prefix }}

      - name: cache node_modules build
        # TODO: cache issue in our self-hosted macos runner ESPIPE: invalid seek, read
        # but its ok to ignore, its still the fastest builder
        # NOTE: enabling cache in the self hosted runner slows down the pipeline by 4m because post-cache builder error ^
        if: startsWith(inputs.platform, 'linux') || matrix.platform.name == 'darwin+x86-64'
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pnpm
          path: |
            ./pnpm
            ./.pnpm-store
            ./node_modules
            ./modules/desktop/node_modules
            ./modules/ui/node_modules
      - name: cache electron build
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-electron
          path: |
            ./modules/desktop/.svelte-kit
            ./modules/desktop/build

      - name: build release
        run: tea -E xc dist
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          SYNC_I18N: 1
          PUBLIC_MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_PROJECT_TOKEN }}
          DEBUG_BUILD: ${{ inputs.debug }}
          DEBUG: electron-osx-sign*
          PUBLIC_VERSION: ${{ steps.gui-version.outputs.version }}
          USE_HARD_LINKS: false
          CSC_FOR_PULL_REQUEST: true
          # causes build to fail
          # CSC_LINK: ${{ secrets.GUI_APPLE_CERTIFICATE }}
          # CSC_KEY_PASSWORD: ${{ secrets.GUI_APPLE_CERTIFICATE_PASSWORD }}
          # CSC_NAME: ${{ secrets.APPLE_IDENTITY_NO_PREFIX }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      - uses: teaxyz/brewkit/actions/setup-codesign@v0
        if: startsWith(matrix.platform.build-id, 'darwin+')
        with:
            p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
            p12-password: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}
      - run: |
          codesign --sign "$APPLE_IDENTITY" --force --preserve-metadata=entitlements,requirements,flags,runtime ./modules/desktop/dist/*.{zip,dmg} || true
        env:
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
      - name: notarize .app
        run: |
          xcrun altool --notarize-app --username "$APPLE_ID" --password "$APPLE_PASSWORD" --primary-bundle-id "com.tea.xyz" --file ./modules/desktop/dist/*.zip || true
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          ZIP_FILE: ${{ steps.app_files.outputs.zip_arm64 }}

      - name: build artifacts for publishing and notarization
        run: |
          mkdir -p target
          cp ./modules/desktop/dist/*.{zip,dmg,yml,blockmap} ./target/
          tar -czvf artifacts.tgz -C ./target/ .

      - name: s3 artifact upload
        id: s3-artifact-uploader
        env:
          prefix: ${{ inputs.s3-prefix }}
        run: |
          S3_KEY=s3://preview.gui.tea.xyz/$prefix/artifacts.tgz
          aws s3 cp artifacts.tgz $S3_KEY
          echo key=$S3_KEY >> $GITHUB_OUTPUT

      - name: sync translation
        if: inputs.sync-translation == '1'
        run: |
          cd modules/desktop && tea -SE node scripts/update-crowdin-source.cjs
        env:
          CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}

